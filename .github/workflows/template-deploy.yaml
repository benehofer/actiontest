#<DOC>
#Pipelines whose name begins with "template" are 
#<a href='https://docs.github.com/en/actions/using-workflows/reusing-workflows' target='_blank'>
#reusable workflows</a> that are called by the main workflow. When called, the paratemeters declared 
#under "inputs" must be transferred.<br/>The template-deploy pipeline executes the plan and apply 
#phases for each artefact type. To do this, the workflow first downloads the previously created artefact. 
#The workflow then logs on to the Azure Cloud with the service principal, whose attributes are stored 
#in the <a href='https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment' tagret='_blank'>
#Github Actions Environment Secrets</a>, and finally starts the deploy script of the respective artefact type, 
#which is located in the devops folder of the repository. This starts the plan.ps1 or apply.ps1 
#script previously created and contained in the artefact, depending on the mode in which the workflow 
#is executed (mode parameter).
#</DOC>
name: Deploy IAC

on:
  workflow_call:
    inputs:
      doenv:
        required: true
        type: string
      workflowtype:
        required: true
        type: string
      mode:
        required: true
        type: string

jobs:
  deploy:
    name: Deploy ${{  inputs.workflowtype }} (${{  inputs.mode  }} mode)
    runs-on: windows-latest
    environment: ${{  inputs.doenv  }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            devops
      - uses: actions/download-artifact@v4
        with:
          name: ${{  inputs.workflowtype  }}-build
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{  secrets.AZURE_CLIENT_ID  }}
          tenant-id: ${{  secrets.AZURE_TENANT_ID  }}
          subscription-id: ${{  secrets.AZURE_SUB_ID  }}
      - name: Deploy ${{  inputs.workflowtype  }}
        shell: pwsh
        run: .\devops\${{  inputs.workflowtype  }}\deploy.ps1
        env:
          appEnv: ${{  vars.APP_ENVIRONMENT  }}
          doEnv: ${{  vars.DEVOPS_ENVIRONMENT  }}
          mode: ${{  inputs.mode  }}